/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, loadContractArtifact, loadContractArtifactForPublic, NoteSelector, PublicKeys, } from "@aztec/aztec.js";
import LendingContractArtifactJson from "../../../lending/target/lending-Lending.json" assert { type: "json" };
export const LendingContractArtifact = loadContractArtifact(LendingContractArtifactJson);
/**
 * Type-safe interface for contract Lending;
 */
export class LendingContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, LendingContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, LendingContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, portal_address) {
        return new DeployMethod(PublicKeys.default(), wallet, LendingContractArtifact, LendingContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, portal_address) {
        return new DeployMethod(publicKeys, wallet, LendingContractArtifact, LendingContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, LendingContractArtifact, LendingContract.at, Array.from(arguments).slice(1), opts.method ?? "constructor");
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return LendingContractArtifact;
    }
    /**
     * Returns this contract's artifact with public bytecode.
     */
    static get artifactForPublic() {
        return loadContractArtifactForPublic(LendingContractArtifactJson);
    }
    static get storage() {
        return {
            portal_address: {
                slot: new Fr(1n),
            },
        };
    }
    static get notes() {
        return {
            UintNote: {
                id: new NoteSelector(0),
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGVuZGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL0xlbmRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBRXRDLG9CQUFvQjtBQUNwQixPQUFPLEVBS0wsUUFBUSxFQUVSLFlBQVksRUFPWixZQUFZLEVBS1osRUFBRSxFQUdGLG9CQUFvQixFQUNwQiw2QkFBNkIsRUFFN0IsWUFBWSxFQUdaLFVBQVUsR0FJWCxNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sMkJBQTJCLE1BQU0sOENBQThDLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDL0csTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsb0JBQW9CLENBQ3pELDJCQUFtRCxDQUNwRCxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxZQUFZO0lBQy9DLFlBQW9CLFFBQXFDLEVBQUUsTUFBYztRQUN2RSxLQUFLLENBQUMsUUFBUSxFQUFFLHVCQUF1QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQXFCLEVBQUUsTUFBYztRQUMxRCxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQ2hCLE9BQU8sRUFDUCxlQUFlLENBQUMsUUFBUSxFQUN4QixNQUFNLENBQ3FCLENBQUM7SUFDaEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsY0FBOEI7UUFDakUsT0FBTyxJQUFJLFlBQVksQ0FDckIsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUNwQixNQUFNLEVBQ04sdUJBQXVCLEVBQ3ZCLGVBQWUsQ0FBQyxFQUFFLEVBQ2xCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLG9CQUFvQixDQUNoQyxVQUFzQixFQUN0QixNQUFjLEVBQ2QsY0FBOEI7UUFFOUIsT0FBTyxJQUFJLFlBQVksQ0FDckIsVUFBVSxFQUNWLE1BQU0sRUFDTix1QkFBdUIsRUFDdkIsZUFBZSxDQUFDLEVBQUUsRUFDbEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsY0FBYyxDQUMxQixJQUE2RCxFQUM3RCxHQUFHLElBQStDO1FBRWxELE9BQU8sSUFBSSxZQUFZLENBQ3JCLElBQUksQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUN2QyxJQUFJLENBQUMsTUFBTSxFQUNYLHVCQUF1QixFQUN2QixlQUFlLENBQUMsRUFBRSxFQUNsQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDOUIsSUFBSSxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQzdCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLHVCQUF1QixDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sS0FBSyxpQkFBaUI7UUFDakMsT0FBTyw2QkFBNkIsQ0FDbEMsMkJBQW1ELENBQ3BELENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxLQUFLLE9BQU87UUFDdkIsT0FBTztZQUNMLGNBQWMsRUFBRTtnQkFDZCxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2pCO1NBQ3lDLENBQUM7SUFDL0MsQ0FBQztJQUVNLE1BQU0sS0FBSyxLQUFLO1FBQ3JCLE9BQU87WUFDTCxRQUFRLEVBQUU7Z0JBQ1IsRUFBRSxFQUFFLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQzthQUN4QjtTQUMyQixDQUFDO0lBQ2pDLENBQUM7Q0FvREYifQ==